#include <stdio.h>
int search(int array[], int n, int x) {

  for (int i = 0; i < n; i++)
    if (array[i] == x)
      return i;
  return -1;
}
int main() {
  int array[] = {2, 4, 0, 1, 9};
  int x = 1;
  int n = sizeof(array) / sizeof(array[0]);

  int result = search(array, n, x);

  (result == -1) ? printf("Element not found") : printf("Element found at index: %d", result);
}

* ALGORITHM FOR LINEAR SEARCH:
Step 1: Start 
Step 2: Declare an array, and search data variable-x.
Step 3: Traverse the entire array until search data is found.
                 If search data  is present then 
                               return its location
             else 
                               return -1
Step 4: print data 
Step 5: Stop

* TIME COMPLEXITY FOR LINEAR SEARCH:
Best Case: O (1)
Average Case: O (n)
Worst Case: O (n)

5) GCD OF NUMBERS USING EUCLIDEAN FORMULA:
#include <stdio.h>
int gcd(int a, int b)
{
	if (a == 0)
		return b;
	return gcd(b % a, a);
}
int main()
{
	int a = 60, b = 25;
	printf("GCD(%d, %d) = %d\n", a, b, gcd(a, b));
	a = 35, b = 10;
	printf("GCD(%d, %d) = %d\n", a, b, gcd(a, b));
	a = 31, b = 2;
	printf("GCD(%d, %d) = %d\n", a, b, gcd(a, b));
	return 0;
}

* ALGORITHM FOR GCD OF 2 NUMBERS:
Step 1:  Let  a, b  be the two numbers
Step 2:  a mod b = R
Step 3:  Let  a = b  and  b = R
Step 4:  Repeat Steps 2 and 3 until  a mod b  is greater than 0
Step 5:  GCD = b
Step 6: Finish

* TIME COMPLEXITY FOR GCD OF 2 NUMBERS:
Worst Case: O(log(min(A,B))
Average Case: O(log A)
Best Case: O(1)
